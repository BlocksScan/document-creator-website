import { render, screen } from "@testing-library/react";
import React from "react";
import sample from "../../../../test/fixtures/sample-config.json";
import { ConfigFile } from "../../../../types";
import { CustomObjectFieldTemplate } from "./CustomObjectField";

const configFile = sample as ConfigFile;
const schema = configFile.forms[0].schema;

const mockObjectStatelessComponent = (id: string, description: string): React.ReactElement => {
  return <div key={id}>{description}</div>;
};

const mockTitleStatelessComponent = (
  id: string,
  title: string,
  required: boolean
): React.ReactElement => {
  return (
    <div key={id} id={id}>
      {title}
      {required && <span>*</span>}
    </div>
  );
};

const mockObjectField = {
  DescriptionField: mockObjectStatelessComponent,
  TitleField: mockTitleStatelessComponent,
  description: undefined,
  disabled: false,
  formContext: {},
  formData: {
    consignee: {},
    notifyParty: {},
    shipper: {
      address: {},
    },
  },
  idSchema: {
    $id: "root",
    blNumber: {
      $id: "root_blNumber",
    },
    consignee: {
      $id: "root_consignee",
      name: {
        $id: "root_consignee_name",
      },
    },
    notifyParty: {
      $id: "root_notifyParty",
      name: {
        $id: "root_notifyParty_name",
      },
    },
    packages: {
      $id: "root_packages",
      description: {
        $id: "root_packages_description",
      },
      measurement: {
        $id: "root_packages_measurement",
      },
      weight: {
        $id: "root_packages_weight",
      },
    },
    placeOfDelivery: {
      $id: "root_placeOfDelivery",
    },
    placeOfReceipt: {
      $id: "root_placeOfReceipt",
    },
    portOfDischarge: {
      $id: "root_portOfDischarge",
    },
    portOfLoading: {
      $id: "root_portOfLoading",
    },
    shipper: {
      $id: "root_shipper",
      address: {
        $id: "root_shipper_address",
        country: {
          $id: "root_shipper_address_country",
        },
        street: {
          $id: "root_shipper_address_street",
        },
      },
      name: {
        $id: "root_shipper_name",
      },
    },
    vessel: {
      $id: "root_vessel",
    },
    voyageNo: {
      $id: "root_voyageNo",
    },
  },
  onAddClick: () => {},
  properties: [
    {
      content: {
        key: "1",
      },
      disabled: false,
      name: "blNumber",
      readonly: false,
      required: false,
    },
    {
      content: {
        key: "11",
      },
      disabled: false,
      name: "shipper",
      readonly: false,
      required: false,
    },
    {
      content: {
        key: "2",
      },
      disabled: false,
      name: "consignee",
      readonly: false,
      required: false,
    },
  ],
  readonly: false,
  required: false,
  schema: {
    properties: {
      blNumber: {
        title: "BL Number",
        type: "string",
      },
      consignee: {
        properties: {
          name: {
            type: "string",
          },
        },
        type: "object",
      },
      notifyParty: {
        properties: {
          name: {
            type: "string",
          },
        },
        title: "notify party",
        type: "object",
      },
    },
    required: ["blNumber"],
    type: "object",
  },
  title: undefined,
  uiSchema: {
    classNames: undefined,
  },
};

describe("customObjectFieldTemplate", () => {
  it("should render all fields correctly", () => {
    render(<CustomObjectFieldTemplate {...mockObjectField} />);
    expect(screen.getByTestId("")).toBeNull();
  });

  it.todo("should render title if it exist");
  it.todo("should render all properties in a list");
});

// DescriptionField: React.StatelessComponent<{ id: string; description: string | React.ReactElement }>;
//         TitleField: React.StatelessComponent<{ id: string; title: string; required: boolean }>;
//         title: string;
//         description: string;
//         properties: {
//             content: React.ReactElement;
//             name: string;
//             disabled: boolean;
//             readonly: boolean;
//         }[];
//         required: boolean;
//         schema: JSONSchema6;
//         uiSchema: UiSchema;
//         idSchema: IdSchema;
//         formData: T;
//         formContext: any;
